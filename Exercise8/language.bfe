%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "tree.h"
#include "code_gen.h"

%}

%start stat

%term T_EMPTY=1
%term T_NUM=2
%term T_RET=3
%term T_VAR=4
%term T_STAT=5
%term T_ADD=6
%term T_MUL=7
%term T_NEG=8
%term T_ARR_ACC=9
%term T_ASSIGN=10
%term T_LEXPR_VAR=11
%term T_IF=12
%term T_AND=13
%term T_NOT=14
%term T_GREATER=15
%term T_NOTEQU=16
%term T_LEXPR_ARRAY_ACCESS=17
%term T_FUNC_CALL=18
%term T_PARAM=19
%term T_SAVE_STACK=20

%%

stat:   ret                     # 0 #
stat:   assign                  # 0 #      
stat:   ifgoto                  # 0 #
stat:   expr                    # 0 #

ret:    T_RET(expr)             # 1 # asm_ret(bnode);
assign: T_ASSIGN(expr, lexpr)   # 0 #
ifgoto: T_IF(cond)              # 1 # asm_if(bnode);

expr:   cexpr                   # 1 # asm_cexpr_to_expr(bnode);

expr:   T_ADD(expr, expr)       # 1 # asm_add(bnode, bnode->left->reg, bnode->right->reg);
expr:   T_ADD(cexpr, expr)      # 1 # asm_add(bnode, to_literal(bnode->left->val), bnode->right->reg);
expr:   T_ADD(expr, cexpr)      # 1 # asm_add(bnode, to_literal(bnode->right->val), bnode->left->reg);
cexpr:  T_ADD(cexpr, cexpr)     # 0 # asm_add_const(bnode);

expr:   T_MUL(expr, expr)       # 1 # asm_mul(bnode, bnode->left->reg, bnode->right->reg);
expr:   T_MUL(expr, cexpr)      # 1 # asm_mul(bnode, to_literal(bnode->right->val), bnode->left->reg);
expr:   T_MUL(cexpr, expr)      # 1 # asm_mul(bnode, to_literal(bnode->left->val), bnode->right->reg);
expr:   T_FUNC_CALL(save, param)# 1 # asm_func_call(bnode);

save:   T_SAVE_STACK            # 1 # asm_save_stack(bnode);
param:  T_PARAM(expr, param)    # 1 # asm_param(bnode);
param:  T_PARAM(expr, empty)    # 1 # asm_param(bnode);

cexpr:  T_MUL(cexpr, cexpr)     # 0 # asm_mul_const(bnode);


expr:   T_NEG(expr)             # 1 # asm_neg(bnode, bnode->left->reg);
cexpr:  T_NEG(cexpr)            # 0 # asm_neg_const(bnode);

cexpr:  T_NUM                   # 0 #
expr:   T_VAR                   # 1 # asm_var(bnode);
expr:   T_ARR_ACC(expr, expr)   # 1 # asm_array_access(bnode);

lexpr:  T_LEXPR_VAR             # 1 # asm_lexpr_var(bnode);
lexpr:  T_LEXPR_ARRAY_ACCESS(expr, expr) # 1 # asm_lexpr_array_access(bnode);

cond:   T_AND(cond,cond)        # 1 # asm_and(bnode);
cond:   T_NOT(cond)             # 1 # asm_not(bnode);

cond:   T_GREATER(expr, expr)   # 1 # asm_greater(bnode);
cond:   T_NOTEQU(expr, expr)    # 1 # asm_notequ(bnode);

empty:  T_EMPTY                 # 0 #


%%
